# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import math
import os
import re

import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, QDir, QThread, QObject, pyqtSignal
from PyQt5.QtWidgets import QFileDialog, QListWidgetItem, QApplication
from bs4 import BeautifulSoup as bs
import gg

gurl = ""
gpath = ""
gchapters = []

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        # Here we pass the update_progress (uncalled!)
        # function to the long_running_function:
        print("urlQ : ", gurl, "chapterslistQ : ", len(gchapters), "pathQ : ", gpath)
        gg.download(gurl,gchapters,gpath,self.update_progress)
        self.finished.emit()

    def update_progress(self, percent):
        self.progress.emit(percent)
        # print("procc",self.progress)
class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 552)
        r = requests.get("https://links-update.herokuapp.com/?py=t")
        titles = json.loads(r.text)
        for index, title in enumerate(titles):
            titles[index] = title["title"]
        print(len(titles))
        self.chapterstodownload = []
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.search = QtWidgets.QLineEdit(self.centralwidget)
        self.search.setObjectName("search")
        self.horizontalLayout_3.addWidget(self.search)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.mangalist = QtWidgets.QListWidget(self.centralwidget)
        self.mangalist.setObjectName("mangalist")
        self.verticalLayout_2.addWidget(self.mangalist)
        self.horizontalLayout_4.addLayout(self.verticalLayout_2)
        spacerItem = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pathedit = QtWidgets.QLineEdit(self.centralwidget)
        self.pathedit.setObjectName("pathedit")
        self.horizontalLayout.addWidget(self.pathedit)
        self.pathbtn = QtWidgets.QPushButton(self.centralwidget)
        self.pathbtn.setObjectName("pathbtn")
        self.horizontalLayout.addWidget(self.pathbtn)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.urledit = QtWidgets.QLineEdit(self.centralwidget)
        self.urledit.setObjectName("urledit")
        self.horizontalLayout_2.addWidget(self.urledit)
        self.loadbtn = QtWidgets.QPushButton(self.centralwidget)
        self.loadbtn.setObjectName("loadbtn")
        self.horizontalLayout_2.addWidget(self.loadbtn)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout_5.addLayout(self.verticalLayout)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(10)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.chapterslist = QtWidgets.QListWidget(self.centralwidget)
        self.chapterslist.setObjectName("chapterslist")
        self.verticalLayout_3.addWidget(self.chapterslist)
        self.downloadbtn = QtWidgets.QPushButton(self.centralwidget)
        self.downloadbtn.setObjectName("downloadbtn")
        self.verticalLayout_3.addWidget(self.downloadbtn)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_3.addWidget(self.progressBar)
        self.verticalLayout_5.addLayout(self.verticalLayout_3)
        self.horizontalLayout_4.addLayout(self.verticalLayout_5)
        self.horizontalLayout_4.setStretch(0, 2)
        self.horizontalLayout_4.setStretch(2, 10)
        self.horizontalLayout_5.addLayout(self.horizontalLayout_4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1024, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.pathbtn.clicked.connect(self.changeFolder)
        self.search.textEdited.connect(self.showCurrentText)
        self.pathedit.setText(os.path.join(os.getcwd(),"manga"))
        self.mangalist.doubleClicked.connect(self.clickmanga)
        self.loadbtn.clicked.connect(self.loadchapters)
        self.downloadbtn.clicked.connect(self.download)
        self.chapterslist.currentItemChanged.connect(self.check)

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def check(self):
        try:
            if self.chapterslist.currentItem().checkState():
                self.chapterslist.currentItem().setCheckState(0)
            else:
                self.chapterslist.currentItem().setCheckState(2)
        except Exception as e:
            print(e)

        # self.chapterslist.currentItem().setCheckState(True)
        # print(self.chapterslist.currentItem().text())

    def showCurrentText(self):
        print(self.search.text())
        # a= self.mangalist.currentItem().text()
        self.mangalist.clear()
        newarr = []
        for title in titles:
            if title.lower().find(self.search.text().lower()) > -1:
                newarr.append(title)
        self.mangalist.addItems(newarr)
        # print (a) # "Devilchi"
    def changeFolder(self):
        file = str(QFileDialog.getExistingDirectory(self.urledit, "Select Directory"))
        self.pathedit.setText(file)
    def loadchapters(self):
        url = self.urledit.text()
        req = requests.get(url)
        self.chapterslist.clear()
        soup = bs(req.text,"html.parser")
        chapters = []
        for link in soup.findAll('a'):
            if link.has_attr('href'):
                if str(link['href']).find(url.split("/")[len(url.split("/")) - 1] + "/") != -1:
                    chapters.append(link.text)
        print("finished chapters")
        # chapters = chapters[::-1]
        print(chapters)
        for chapter in chapters:
            item = QListWidgetItem()
            item.setText(QApplication.translate("Dialog", chapter, None))
            item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)

            self.chapterslist.addItem(QListWidgetItem(item))

    def clickmanga(self):
        a = self.mangalist.currentItem().text().strip().lower()
        oga = self.mangalist.currentItem().text().strip()
        print("begining sub")
        a = re.sub(r"à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ", "a", a);print(a)
        a = re.sub(r"è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ", "e", a);print(a)
        a = re.sub(r"ì|í|ị|ỉ|ĩ", "i", a);print(a)
        a = re.sub(r"ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ", "o", a);print(a)
        a = re.sub(r"ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ", "u", a);print(a)
        a = re.sub(r"ỳ|ý|ỵ|ỷ|ỹ", "y", a);print(a)
        a = re.sub(r"đ", "d", a);print(a)
        a = re.sub(r" ", "_", a);print(a)
        a = re.sub(r"[^0-9a-z\s]", "_", a, flags=re.IGNORECASE);print(a)
        a = re.sub(r"_+_", "_", a);print(a)
        a = re.sub(r"^\_+|\_+$", "", a);print(a)
        num = 0
        while(True): # this is for wehn the manga isnt in the first page

            req = requests.get("https://manganato.com/search/story/"+a+"?page="+str(num))

            soup = bs(req.text,"html.parser")
            # link = soup.find("a",class_="a-h text-nowrap item-title")['href']
            try:
                link = str(soup.find("a", string=oga)['href'])
                self.urledit.setText(link)
                print(link)

                break
            except Exception as e:
                print("oga : ",oga)
                # print("a",a)
                print("trace ",e)
                print(req.url)
                num = num+1
                if num > 20:
                    break


    def download(self):
        self.chapterstodownload = []
        for index in range(self.chapterslist.count()):
            if self.chapterslist.item(index).checkState():
                print(self.chapterslist.item(index).text())
                self.chapterstodownload.append(self.chapterslist.item(index).text())

                # print(self.chapterslist.item(index).text())

        # print(self.chapterstodownload)
        print("url:",self.urledit.text(),"chapters:",self.chapterstodownload,"path:",self.pathedit.text())

        glob = globals()
        glob['gpath'] = self.pathedit.text()
        glob['gchapters'] =self.chapterstodownload
        glob["gurl"] =self.urledit.text()
        # gg.download(self.urledit.text(),self.chapterstodownload,self.pathedit.text())
        self.execute()

    def execute(self):
        # self.update_progress(0)
        self.thread = QThread()
        self.worker = Worker()
        self.worker.moveToThread(self.thread)

        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.report_progress)

        self.progressBar.setValue(0)
        self.thread.start()
        self.downloadbtn.setEnabled(False)
        self.thread.finished.connect(lambda : self.downloadbtn.setEnabled(True))
    def report_progress(self,n):
        print(n,"chapter downloaded")
        self.progressBar.setValue(math.ceil((n/len(self.chapterstodownload))*100))
        # self.progressBar.setProperty("value", n)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.search.setPlaceholderText(_translate("MainWindow", "search"))
        __sortingEnabled = self.mangalist.isSortingEnabled()
        self.mangalist.setSortingEnabled(False) # to sort
        self.mangalist.setSortingEnabled(__sortingEnabled)
        self.pathedit.setPlaceholderText(_translate("MainWindow", "path"))
        self.pathbtn.setText(_translate("MainWindow", "..."))
        self.urledit.setPlaceholderText(_translate("MainWindow", "url"))
        self.loadbtn.setText(_translate("MainWindow", "load chapters"))
        self.downloadbtn.setText(_translate("MainWindow", "Download"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    r = requests.get("https://links-update.herokuapp.com/?py=t")
    titles = json.loads(r.text)
    for index ,title in enumerate(titles):
       titles[index] = title["title"]
    ui.mangalist.addItems(titles)


    sys.exit(app.exec())
